/*Copyright (c) 2015-2016 vcs2.com All Rights Reserved.
 This software is the confidential and proprietary information of vcs2.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with vcs2.com*/
package com.verifyvcsshare.dbtest_shared.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;
import com.verifyvcsshare.dbtest_shared.Table2;
import com.verifyvcsshare.dbtest_shared.service.Table2Service;

/**
 * Controller object for domain model class Table2.
 * @see Table2
 */
@RestController("dbtest_shared.Table2Controller")
@Api(value = "Table2Controller", description = "Exposes APIs to work with Table2 resource.")
@RequestMapping("/dbtest_shared/Table2")
public class Table2Controller {

    private static final Logger LOGGER = LoggerFactory.getLogger(Table2Controller.class);

    @Autowired
    @Qualifier("dbtest_shared.Table2Service")
    private Table2Service table2Service;

    @ApiOperation(value = "Creates a new Table2 instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Table2 createTable2(@RequestBody Table2 table2) {
        LOGGER.debug("Create Table2 with information: {}", table2);
        table2 = table2Service.create(table2);
        LOGGER.debug("Created Table2 with information: {}", table2);
        return table2;
    }

    @ApiOperation(value = "Returns the Table2 instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Table2 getTable2(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting Table2 with id: {}", id);
        Table2 foundTable2 = table2Service.getById(id);
        LOGGER.debug("Table2 details with id: {}", foundTable2);
        return foundTable2;
    }

    @ApiOperation(value = "Updates the Table2 instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Table2 editTable2(@PathVariable("id") Integer id, @RequestBody Table2 table2) throws EntityNotFoundException {
        LOGGER.debug("Editing Table2 with id: {}", table2.getId());
        table2.setId(id);
        table2 = table2Service.update(table2);
        LOGGER.debug("Table2 details with id: {}", table2);
        return table2;
    }

    @ApiOperation(value = "Deletes the Table2 instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteTable2(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting Table2 with id: {}", id);
        Table2 deletedTable2 = table2Service.delete(id);
        return deletedTable2 != null;
    }

    /**
     * @deprecated Use {@link #findTable2s(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of Table2 instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Table2> findTable2s(Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering Table2s list");
        return table2Service.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the list of Table2 instances matching the search criteria.")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Table2> findTable2s(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Table2s list");
        return table2Service.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data.")
    @RequestMapping(value = "/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportTable2s(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        return table2Service.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns the total count of Table2 instances.")
    @RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Long countTable2s(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
        LOGGER.debug("counting Table2s");
        return table2Service.count(query);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service Table2Service instance
	 */
    protected void setTable2Service(Table2Service service) {
        this.table2Service = service;
    }
}
