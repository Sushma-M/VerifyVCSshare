/*Copyright (c) 2015-2016 vcs2.com All Rights Reserved.
 This software is the confidential and proprietary information of vcs2.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with vcs2.com*/
package com.verifyvcsshare.dbtest_shared.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;

import com.verifyvcsshare.dbtest_shared.Dept;

/**
 * Service object for domain model class {@link Dept}.
 */
public interface DeptService {

    /**
     * Creates a new Dept. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on Dept if any.
     *
     * @param dept Details of the Dept to be created; value cannot be null.
     * @return The newly created Dept.
     */
	Dept create(Dept dept);


	/**
	 * Returns Dept by given id if exists.
	 *
	 * @param deptId The id of the Dept to get; value cannot be null.
	 * @return Dept associated with the given deptId.
     * @throws EntityNotFoundException If no Dept is found.
	 */
	Dept getById(Integer deptId) throws EntityNotFoundException;

    /**
	 * Find and return the Dept by given id if exists, returns null otherwise.
	 *
	 * @param deptId The id of the Dept to get; value cannot be null.
	 * @return Dept associated with the given deptId.
	 */
	Dept findById(Integer deptId);


	/**
	 * Updates the details of an existing Dept. It replaces all fields of the existing Dept with the given dept.
	 *
     * This method overrides the input field values using Server side or database managed properties defined on Dept if any.
     *
	 * @param dept The details of the Dept to be updated; value cannot be null.
	 * @return The updated Dept.
	 * @throws EntityNotFoundException if no Dept is found with given input.
	 */
	Dept update(Dept dept) throws EntityNotFoundException;

    /**
	 * Deletes an existing Dept with the given id.
	 *
	 * @param deptId The id of the Dept to be deleted; value cannot be null.
	 * @return The deleted Dept.
	 * @throws EntityNotFoundException if no Dept found with the given id.
	 */
	Dept delete(Integer deptId) throws EntityNotFoundException;

	/**
	 * Find all Depts matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
	 *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
	 *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching Depts.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
	 */
    @Deprecated
	Page<Dept> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
	 * Find all Depts matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
	 *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching Depts.
     *
     * @see Pageable
     * @see Page
	 */
    Page<Dept> findAll(String query, Pageable pageable);

    /**
	 * Exports all Depts matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
	 *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
	 */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

	/**
	 * Retrieve the count of the Depts in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
	 * @return The count of the Dept.
	 */
	long count(String query);


}

